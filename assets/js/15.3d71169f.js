(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{285:function(n,_,v){"use strict";v.r(_);var t=v(13),a=Object(t.a)({},(function(){var n=this,_=n._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("h1",{attrs:{id:"关于"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[n._v("#")]),n._v(" 关于")]),n._v(" "),_("h2",{attrs:{id:"_1-时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-时间复杂度"}},[n._v("#")]),n._v(" 1.时间复杂度")]),n._v(" "),_("ul",[_("li",[_("p",[n._v("时间频度")]),n._v(" "),_("p",[n._v("一个算法执行所耗费的时间,从理论上是不能算出来的,必须上机运行测试才能知道.但我们不可能也没有必要对每个算法都上机测试,只需知道哪个算法花费的时间多,哪个算法花费的时间少就可以了.并且一个算法花费的时间与算法中语句的执行次数成正比例,哪个算法中语句执行次数多,它花费时间就多.一个算法中的语句执行次数称为语句频度或时间频度.记为T(n).")])]),n._v(" "),_("li",[_("p",[n._v("时间复杂度")]),n._v(" "),_("p",[n._v("一般情况下,算法中基本操作重复执行的次数是问题规模n的某个函数,用T(n)表示,若有某个辅助函数f(n),使得当n趋近于无穷大时,T（n)/f(n)的极限值为不等于零的常数,则称f(n)是T(n)的同数量级函数.记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度,简称时间复杂度.")])]),n._v(" "),_("li",[_("p",[n._v("在各种不同算法中,若算法中语句执行次数为一个常数,则时间复杂度为O(1),另外,在时间频度不相同时,时间复杂度有可能相同,如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同,但时间复杂度相同,都为O(n2).")])]),n._v(" "),_("li",[_("p",[n._v("按数量级递增排列,常见的时间复杂度有：")]),n._v(" "),_("p",[n._v("O(1)称为常量级，算法的时间复杂度是一个常数。")]),n._v(" "),_("p",[n._v("O(n)称为线性级，时间复杂度是数据量n的线性函数。")]),n._v(" "),_("p",[n._v("O(n²)称为平方级，与数据量n的二次多项式函数属于同一数量级。")]),n._v(" "),_("p",[n._v("O(n³)称为立方级，是n的三次多项式函数。")]),n._v(" "),_("p",[n._v("O(logn)称为对数级，是n的对数函数。")]),n._v(" "),_("p",[n._v("O(nlogn)称为介于线性级和平方级之间的一种数量级")]),n._v(" "),_("p",[n._v("O(2ⁿ)称为指数级，与数据量n的指数函数是一个数量级。")]),n._v(" "),_("p",[n._v("O(n!)称为阶乘级，与数据量n的阶乘是一个数量级。")]),n._v(" "),_("p",[n._v("它们之间的关系是： O(1)<O(logn)<O(n)<O(nlogn)<O(n²)<O(n³)<O(2ⁿ)<O(n!)，随着问题规模n的不断增大,上述时间复杂度不断增大,算法的执行效率越低.")])])]),n._v(" "),_("h2",{attrs:{id:"_2-空间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-空间复杂度"}},[n._v("#")]),n._v(" 2.空间复杂度")]),n._v(" "),_("ul",[_("li",[n._v("评估执行程序所需的存储空间。可以估算出程序对计算机内存的使用程度。不包括算法程序代码和所处理的数据本身所占空间部分。通常用所使用额外空间的字节数表示。其算法比较简单，记为S(n)=O(f(n))，其中，n表示问题规模。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);